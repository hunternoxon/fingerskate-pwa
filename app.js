const RULES={DIRECTION_DEFAULTS:{"50-50":"frontside","5-0":"frontside","boardslide":"backside","noseslide":"backside","lipslide":"frontside","tailslide":"frontside","bluntslide":"backside","nosegrind":"frontside","crooked":"backside","willy":"backside","feeble":"backside","smith":"backside","salad":"backside","overcrook":"backside","noseblunt":"frontside"},STANCES:["regular","switch","nollie","fakie"],DIRECTIONS:["frontside","backside"],SPINS:[180,360,540,720],FLIPS:["kickflip","heelflip","hardflip","inward heelflip","varial kickflip","varial heelflip","tre flip","360 flip","laser flip","bigspin flip","bigspin heelflip"],GRINDS_SLIDES:["50-50","5-0","boardslide","noseslide","tailslide","lipslide","smith","feeble","willy","salad","crooked","overcrook","nosegrind","noseblunt","bluntslide"],MANUALS:["manual","nose manual","one wheel manual"],OBSTACLES:["flat","curb","ledge","flatbar","handrail","rail","hubba","kicker","gap","stair","quarterpipe","bank","mini ramp","funbox","manual pad","box"],GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba"]),SLIDE_OK:new Set(["ledge","hubba","rail","handrail","flatbar","curb","box"]),MANUAL_OK:new Set(["flat","manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox"])};const BASE_POINTS={stance:{regular:0,fakie:.1,nollie:.2,switch:.3},spin:{180:.2,360:.4,540:.6,720:.8},flip:{"kickflip":.3,"heelflip":.35,"hardflip":.55,"inward heelflip":.6,"varial kickflip":.45,"varial heelflip":.5,"tre flip":.8,"360 flip":.8,"laser flip":.85,"bigspin flip":.6,"bigspin heelflip":.65},grind_slide:{"50-50":.3,"5-0":.4,"boardslide":.4,"noseslide":.45,"tailslide":.5,"lipslide":.55,"smith":.65,"feeble":.65,"willy":.55,"salad":.6,"crooked":.65,"overcrook":.75,"nosegrind":.7,"noseblunt":.9,"bluntslide":.85},obstacle:{"flat":0,"manual pad":.1,"box":.1,"curb":.15,"ledge":.25,"hubba":.35,"flatbar":.35,"rail":.45,"handrail":.55,"gap":.5,"kicker":.1,"stair":.45,"quarterpipe":.4,"bank":.25,"funbox":.2,"mini ramp":.3},manual:{"manual":.25,"nose manual":.35,"one wheel manual":.6}},COMBO_BONUSES={spin_plus_flip:.2,flip_into_grind:.25,spin_into_grind:.15,manual_combo:.15};function isValidCombo(c){const g=c.grind_slide,m=c.manual,ob=c.obstacle,fl=c.flip;if(g){const isSlide=["boardslide","lipslide","tailslide","noseslide","bluntslide"].includes(g);if(!ob)return false;if(isSlide&&!RULES.SLIDE_OK.has(ob))return false;if(!isSlide&&!(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob)))return false}if(m){if(ob&&!RULES.MANUAL_OK.has(ob))return false}if(fl&&!g&&!m&&ob){if(!RULES.AIR_OK.has(ob))return false}return true}function baseScore(c){let s=1,bd=[];const st=c.stance||"regular";s+=BASE_POINTS.stance[st]||0;bd.push(["stance",st,BASE_POINTS.stance[st]||0]);if(c.spin){s+=BASE_POINTS.spin[c.spin]||0;bd.push(["spin",c.spin,BASE_POINTS.spin[c.spin]||0])}if(c.flip){s+=BASE_POINTS.flip[c.flip]||0;bd.push(["flip",c.flip,BASE_POINTS.flip[c.flip]||0])}if(c.grind_slide){s+=BASE_POINTS.grind_slide[c.grind_slide]||0;bd.push(["grind_slide",c.grind_slide,BASE_POINTS.grind_slide[c.grind_slide]||0])}if(c.manual){s+=BASE_POINTS.manual[c.manual]||0;bd.push(["manual",c.manual,BASE_POINTS.manual[c.manual]||0])}if(c.obstacle){s+=BASE_POINTS.obstacle[c.obstacle]||0;bd.push(["obstacle",c.obstacle,BASE_POINTS.obstacle[c.obstacle]||0])}let bonus=0;if(c.spin&&c.flip)bonus+=COMBO_BONUSES.spin_plus_flip;if(c.flip&&c.grind_slide)bonus+=COMBO_BONUSES.flip_into_grind;if(c.spin&&c.grind_slide)bonus+=COMBO_BONUSES.spin_into_grind;if(c.manual&&(c.flip||c.spin))bonus+=COMBO_BONUSES.manual_combo;s*=1+bonus;return{score:Math.max(s,.1),breakdown:bd,combo:1+bonus}}function landMultiplier(a){return{1:1,2:.94,3:.92}[a]||0}function letterForMiss(m){return"SKATE"[m-1]||""}function difficultyTier(s){return Math.max(1,Math.min(10,s|0))}function maybe(p){return Math.random()<p}function generateTrick(skill,allowed){const s=difficultyTier(skill);let ob=allowed&&allowed.length?allowed[Math.floor(Math.random()*allowed.length)]:RULES.OBSTACLES[Math.floor(Math.random()*RULES.OBSTACLES.length)];const c={stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:null,obstacle:ob,extras:[]};if(s>=2&&maybe(.25+.05*s))c.stance=["fakie","nollie","switch"][Math.floor(Math.random()*3)];if(maybe(.2+.05*s)){const spins=[180,360].concat(s>=6?[540]:[]).concat(s>=9?[720]:[]);c.spin=spins[Math.floor(Math.random()*spins.length)];if(maybe(.6))c.spin_dir=RULES.DIRECTIONS[Math.floor(Math.random()*2)]}if(maybe(.35+.06*s)){let pool=["kickflip","heelflip"];if(s>=4)pool=pool.concat(["varial kickflip","varial heelflip"]);if(s>=6)pool=pool.concat(["hardflip","inward heelflip","bigspin flip","bigspin heelflip"]);if(s>=7)pool=pool.concat(["tre flip","360 flip"]);if(s>=9)pool=pool.concat(["laser flip"]);c.flip=pool[Math.floor(Math.random()*pool.length)]}if(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob)){if(maybe(.35+.04*s)){c.grind_slide=RULES.GRINDS_SLIDES[Math.floor(Math.random()*RULES.GRINDS_SLIDES.length)];c.direction=RULES.DIRECTION_DEFAULTS[c.grind_slide]||null}}else if(RULES.MANUAL_OK.has(ob)&&maybe(.3+.05*s)){c.manual=RULES.MANUALS[Math.floor(Math.random()*RULES.MANUALS.length)]}else if(RULES.AIR_OK.has(ob)&&!c.flip){if(maybe(.5+.05*s)){let pool=["kickflip","heelflip","varial kickflip"];if(s>=7)pool.push("tre flip");c.flip=pool[Math.floor(Math.random()*pool.length)]}}for(let i=0;i<5;i++){if(isValidCombo(c))break;if(c.grind_slide&&!(RULES.GRIND_OK.has(c.obstacle)||RULES.SLIDE_OK.has(c.obstacle))){const opts=Array.from(new Set([...RULES.GRIND_OK,...RULES.SLIDE_OK]));c.obstacle=opts[Math.floor(Math.random()*opts.length)]}else if(c.manual&&!RULES.MANUAL_OK.has(c.obstacle)){const opts=Array.from(RULES.MANUAL_OK);c.obstacle=opts[Math.floor(Math.random()*opts.length)]}else if(c.flip&&!c.grind_slide&&!c.manual&&!RULES.AIR_OK.has(c.obstacle)){const opts=Array.from(RULES.AIR_OK);c.obstacle=opts[Math.floor(Math.random()*opts.length)]}}return c}function describe(c){const p=[];if(c.stance&&c.stance!=="regular")p.push(c.stance);if(c.spin)p.push(c.spin_dir?`${c.spin_dir} ${c.spin}`:`${c.spin}`);if(c.flip)p.push(c.flip);if(c.direction&&c.grind_slide)p.push(`${c.direction} ${c.grind_slide}`);else if(c.grind_slide)p.push(c.grind_slide);if(c.manual)p.push(c.manual);if(c.obstacle)p.push(`on ${c.obstacle}`);return p.join(" ")}let skill=6,allowed=["flat","ledge","rail","manual pad","quarterpipe","bank","kicker"];let misses=0,total=0,attempt=1,current=null;const $=(id)=>document.getElementById(id);const els={skill:$('skill'),skillVal:$('skillVal'),obstacles:$('obstacles'),startBtn:$('startBtn'),gameCard:$('gameCard'),screen:$('screen'),trick:$('trick'),letters:$('letters'),landBtn:$('landBtn'),missBtn:$('missBtn'),breakBtn:$('breakBtn'),breakdown:$('breakdown'),breakText:$('breakText'),attempt:$('attempt'),score:$('score'),nextBtn:$('nextBtn'),endBtn:$('endBtn'),overCard:$('overCard'),finalScore:$('finalScore'),bestScore:$('bestScore'),restartBtn:$('restartBtn'),feedbackBtn:$('feedbackBtn')};els.skill.addEventListener('input',e=>els.skillVal.textContent=e.target.value);els.startBtn.addEventListener('click',startSession);els.landBtn.addEventListener('click',()=>settle(true));els.missBtn.addEventListener('click',()=>settle(false));els.nextBtn.addEventListener('click',nextTrick);els.endBtn.addEventListener('click',endSession);els.restartBtn.addEventListener('click',()=>location.reload());els.breakBtn.addEventListener('click',()=>showBreakdown());els.feedbackBtn.addEventListener('click',()=>{const note=prompt("Drop feedback here:");if(!note)return;const bag=JSON.parse(localStorage.getItem('fs_feedback')||'[]');bag.push({note,at:Date.now(),score:total});localStorage.setItem('fs_feedback',JSON.stringify(bag));alert("Saved locally. You can send these later!")});if('serviceWorker'in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./sw.js'))}function startSession(){skill=parseInt(els.skill.value,10);allowed=(els.obstacles.value||"flat, ledge, rail, manual pad, quarterpipe, bank, kicker").split(',').map(s=>s.trim().toLowerCase()).filter(Boolean);misses=0;total=0;attempt=1;els.score.textContent=total.toFixed(2);els.gameCard.classList.remove('hidden');$('overCard').classList.add('hidden');updateLetters();current=generateTrick(skill,allowed);els.trick.textContent=describe(current);els.attempt.textContent=attempt;els.nextBtn.classList.add('hidden');els.breakdown.open=false}function settle(landed){if(landed){const rep=computeScore(current,attempt);total+=rep.final;els.score.textContent=total.toFixed(2);els.breakText.textContent=prettyScore(rep);els.breakdown.open=true;els.nextBtn.classList.remove('hidden');disableActionButtons(true)}else{if(attempt<3){attempt++;els.attempt.textContent=attempt}else{misses++;updateLetters();if(misses>=5){endSession();return}els.nextBtn.classList.remove('hidden');disableActionButtons(true)}}}function nextTrick(){attempt=1;els.attempt.textContent=attempt;current=generateTrick(skill,allowed);els.trick.textContent=describe(current);els.breakdown.open=false;els.nextBtn.classList.add('hidden');disableActionButtons(false)}function endSession(){els.gameCard.classList.add('hidden');els.overCard.classList.remove('hidden');els.finalScore.textContent=total.toFixed(2);const best=Math.max(total,parseFloat(localStorage.getItem('fs_best')||"0"));localStorage.setItem('fs_best',String(best));els.bestScore.textContent=best.toFixed(2)}function updateLetters(){const t="SKATE".split("").map((ch,i)=>i<misses?`[${ch}]`:ch).join(" ");els.letters.textContent=t}function disableActionButtons(off){els.landBtn.disabled=off;els.missBtn.disabled=off;els.breakBtn.disabled=off}function computeScore(c,attempt){if(!isValidCombo(c))return{valid:false,base:0,combo:1,attempt:0,final:0,breakdown:[]};const{score,breakdown,combo}=baseScore(c);const mult=({1:1,2:.94,3:.92}[attempt])||0;return{valid:true,base:round(score,3),combo:round(combo,3),attempt:mult,final:round(score*mult,3),breakdown}}function prettyScore(rep){if(!rep.valid)return"Invalid combo for obstacle.";let lines=[`Base: ${rep.base}`,`Combo x${rep.combo}`,`Attempt x${rep.attempt} => Final: ${rep.final}`,"","Breakdown:"];for(const[k,n,pts]of rep.breakdown){lines.push(`  + ${k}:${n} = ${pts}`)}return lines.join("\n")}function round(x,n){const k=Math.pow(10,n);return Math.round(x*k)/k}